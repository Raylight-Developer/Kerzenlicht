//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
Ray f_cameraRay(vec2 uv) {
	vec3 projection_center = camera_pos + camera_focal_length * camera_zvec;
	vec3 projection_u = normalize(cross(camera_zvec, camera_yvec)) * camera_sensor_size;
	vec3 projection_v = normalize(cross(projection_u, camera_zvec)) * camera_sensor_size;
	return Ray(camera_pos, normalize(projection_center + (projection_u * uv.x) + (projection_v * uv.y) - camera_pos));
}

//vec4 f_environmentTexture(in Ray ray) {
//	ray.direction = eulerToRot(vec3(0,-90,0)) * ray.direction;
//
//	float phi = atan(ray.direction.y, r.direction.x);
//	float theta = acos(ray.direction.z);
//	float u = phi / TWO_PI + 0.5;
//	float v = theta / PI;
//
//	return texture(environment_texture, vec2(u,v)) * HDRI_STRENGTH;
//}

vec4 f_pathTrace(in Ray ray) {
	float alpha = 1.0f;

	for (uint b = 0; b < ray_bounces; b++) {
		Hit hit_data = f_SceneIntersection(ray);
		if (hit_data.mesh_hit) {
			//return vec4(abs(hit_data.hit_normal), 1);
			return f_shade(hit_data, ray) * alpha;
		}
		else {
			for (int i = 0; i < hit_data.bvh_depth; i++) {
				alpha *= 0.85;
			}
			return vec4(vec3(1-alpha), 1);
		}
			//radiance += f_environmentTexture(ray);
			//break;
	}
}

vec4 f_render(in vec2 uv) {
	vec4 color = vec4(0);

	//const vec2 pixel_size = 1 / resolution.xy;
	//for (uint x = 0; x < samples_per_pixel; x++) {
	//	for (uint y = 0; y < samples_per_pixel; y++) {
	//		vec2 subpixelUV = uv - (vec2(0.5) * pixel_size) + (vec2(float(x) / float(samples_per_pixel), float(y) / float(samples_per_pixel)) * pixel_size);
	//		Ray ray = f_cameraRay(subpixelUV);
	//		color += f_pathTrace(ray);
	//	}
	//}
	//color /= float(samples_per_pixel * samples_per_pixel);

	Ray ray = f_cameraRay(uv);
	color = f_pathTrace(ray);

	//Ray ray = f_cameraRay(uv);
	//color = vec4(abs(ray.direction), 1);
	return clamp(color, 0, 1);
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
bool f_rayBvhIntersection(in Ray ray, in Bvh box, inout float ray_length) {
	vec3 t0 = (box.p_min - ray.origin) * ray.direction;
	vec3 t1 = (box.p_max - ray.origin) * ray.direction;

	float tmin = max(max(min(t0.x, t1.x), min(t0.y, t1.y)), min(t0.z, t1.z));
	float tmax = min(min(max(t0.x, t1.x), max(t0.y, t1.y)), max(t0.z, t1.z));

	if (all(greaterThanEqual(ray.origin, box.p_min)) && all(lessThanEqual(ray.origin, box.p_max))) {
		ray_length = tmax;
		return true;
	}
	else if (tmin <= tmax) {
		ray_length = tmin;
		return true;
	}
	return false;
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
bool f_rayTriangleIntersection(in Ray ray, in vec3 vertex_a, in vec3 vertex_b, in vec3 vertex_c, inout float ray_length) {
	vec3 v1v0 = vertex_b - vertex_a;
	vec3 v2v0 = vertex_c - vertex_a;
	vec3 rov0 = ray.origin- vertex_a;

	vec3  normal = cross(v1v0, v2v0);
	vec3  q = cross(rov0, ray.direction);
	float d = 1.0 / dot(ray.direction, normal);
	float u = d * dot(-q, v2v0);
	float v = d * dot(q, v1v0);
	float t = d * dot(-normal, rov0);

	if (u < 0.0 || v < 0.0 || (u + v) > 1.0)
		return false;

	ray_length = t;
	return true;
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec3 f_barycentricCoords(in vec3 hit_pos, in vec3 vertex_a, in vec3 vertex_b, in vec3 vertex_c) {
	vec3 v0 = vertex_b - vertex_a;
	vec3 v1 = vertex_c - vertex_a;
	vec3 v2 = hit_pos  - vertex_a;

	float d00 = dot(v0, v0);
	float d01 = dot(v0, v1);
	float d11 = dot(v1, v1);
	float d20 = dot(v2, v0);
	float d21 = dot(v2, v1);

	float denom = d00 * d11 - d01 * d01;

	float v = (d11 * d20 - d01 * d21) / denom;
	float w = (d00 * d21 - d01 * d20) / denom;
	float u = 1.0 - v - w;

	return vec3(u, v, w);
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
Hit f_SceneIntersection(in Ray ray) {
	Hit hit_data;
	hit_data.error = false;
	hit_data.bvh_depth = 0;
	hit_data.mesh_hit = false;

	hit_data.t_dist = MAX_DIST;
	float t_dist = MAX_DIST;
	float bvh_t_length = MAX_DIST;

	Ray bvh_ray = Ray(ray.origin, 1.0 / ray.direction);

//	uint nodeOffset = 0;
//	uint stack[8];
//	uint stackIndex = 0;
//	stack[stackIndex++] = nodeOffset;
//
//	while (stackIndex > 0) {
//		Bvh node = bvh_nodes[stack[--stackIndex]];
//		if (f_rayBvhIntersection(
//			bvh_ray,
//			node,
//			bvh_ray_length
//		)) {
//			if (bvh_ray_length < bvh_t_length && bvh_ray_length > EPSILON) {
//				hit_data.bvh_depth++;
//
//				bool isLeaf = node.tri_count > 0;
//				if (isLeaf) {
//					for (uint i = 0; i < node.tri_count; i++) {
//						Triangle tri = triangles[i];
//
//						if (f_rayTriangleIntersection(
//							ray,
//							tri.pos_a,
//							tri.pos_b,
//							tri.pos_c,
//							t_dist
//						)) {
//							if(t_dist < hit_data.t_dist && t_dist > EPSILON) {
//								hit_data.t_dist = t_dist;
//								hit_data.pos = ray.origin + ray.direction * t_dist;
//								hit_data.inside = false;
//								hit_data.mesh_hit = true;
//
//								hit_data.uvw = f_barycentricCoords(
//									hit_data.pos,
//									tri.pos_a,
//									tri.pos_b,
//									tri.pos_c
//								);
//
//								hit_data.hit_tri = tri;
//								hit_data.hit_normal = hit_data.uvw.x * tri.normal_a + hit_data.uvw.y * tri.normal_b + hit_data.uvw.z * tri.normal_c;
//							}
//						}
//					}
//				}
//				else {
//					uint childIndexA = nodeOffset + node.pointer + 0;
//					uint childIndexB = nodeOffset + node.pointer + 1;
//					Bvh childA = bvh_nodes[childIndexA];
//					Bvh childB = bvh_nodes[childIndexB];
//
//					float dstA;
//					f_rayBvhIntersection(bvh_ray, childA, dstA);
//					float dstB;
//					f_rayBvhIntersection(bvh_ray, childB, dstB);
//					
//					// We want to look at closest child node first, so push it last
//					bool isNearestA = dstA <= dstB;
//					float dstNear = isNearestA ? dstA : dstB;
//					float dstFar = isNearestA ? dstB : dstA;
//					uint childIndexNear = isNearestA ? childIndexA : childIndexB;
//					uint childIndexFar = isNearestA ? childIndexB : childIndexA;
//
//					if (dstFar < t_dist) stack[stackIndex++] = childIndexFar;
//					if (dstNear < t_dist) stack[stackIndex++] = childIndexNear;
//				}
//			}
//		}
//	}

//	for (uint i = 0; i < triangles.length(); i++) {
//		Triangle tri = triangles[i];
//		if (f_rayTriangleIntersection(
//			ray,
//			tri.pos_a,
//			tri.pos_b,
//			tri.pos_c,
//			t_dist
//		)) {
//			if (t_dist < hit_data.t_dist && t_dist > EPSILON) {
//				hit_data.t_dist = t_dist;
//				hit_data.pos = ray.origin + ray.direction * t_dist;
//				hit_data.inside = false;
//				hit_data.mesh_hit = true;
//	
//				hit_data.uvw = f_barycentricCoords(
//					hit_data.pos,
//					tri.pos_a,
//					tri.pos_b,
//					tri.pos_c
//				);
//	
//				hit_data.hit_tri = tri;
//				hit_data.hit_normal = hit_data.uvw.x * tri.normal_a + hit_data.uvw.y * tri.normal_b + hit_data.uvw.z * tri.normal_c;
//			}
//		}
//	}

	for (uint i = 0; i < bvh_nodes.length(); i++) {
		Bvh node = bvh_nodes[i];
		if (f_rayBvhIntersection(
			bvh_ray,
			node,
			bvh_t_length
		)) {
			if (bvh_t_length < MAX_DIST && bvh_t_length > EPSILON) {
				hit_data.bvh_depth++;
				if (node.tri_count > 0) {
					for (uint i = node.pointer; i < node.pointer + node.tri_count; i++) {
						Triangle tri = triangles[i];
						if (f_rayTriangleIntersection(
							ray,
							tri.pos_a,
							tri.pos_b,
							tri.pos_c,
							t_dist
						)) {
							if (t_dist < hit_data.t_dist && t_dist > EPSILON) {
								hit_data.t_dist = t_dist;
								hit_data.pos = ray.origin + ray.direction * t_dist;
								hit_data.inside = false;
								hit_data.mesh_hit = true;
					
								hit_data.uvw = f_barycentricCoords(
									hit_data.pos,
									tri.pos_a,
									tri.pos_b,
									tri.pos_c
								);
					
								hit_data.hit_tri = tri;
								hit_data.hit_normal = hit_data.uvw.x * tri.normal_a + hit_data.uvw.y * tri.normal_b + hit_data.uvw.z * tri.normal_c;
							}
						}
					}
				}
			}
		}
	}

	return hit_data;
}
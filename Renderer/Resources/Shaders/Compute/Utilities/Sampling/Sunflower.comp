vec3 f_rotateVec3(in vec3 original, in vec3 target) {
	vec3 axis = normalize(cross(original, target));
	float angle = acos(dot(normalize(original), normalize(target)));
	quat rotationQuat = quat(cos(angle / 2.0), axis * sin(angle / 2.0));
	return rotate(rotationQuat, original);
}

vec3 f_importanceSampleSunflower(uint sample_count, uint sample, vec3 surface_normal, float roughness) {
	float angle = float(sample) * 137.5 * DEG_RAD;
	float clamper = sqrt(float(sample)) * (roughness / sqrt(sample_count));
	clamper = f_InterpolationEaseInOut(clamper);

	float x = cos(angle) * clamper;
	float z = sin(angle) * clamper;
	vec3 position = vec3(x, 0.0, z)
	position.y = sqrt(1.0 - pow(length(position), 2.0));

	vec3 rotation = normalize(position);
	vec3 rotation = f_rotateVec3(rotation, surface_normal);
	return rotation;
}
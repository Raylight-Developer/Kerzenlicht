//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
float f_lerp(in float a,in float b, in float t) {
	return a + t * (b - a);
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec3 f_lerp(in vec3 a,in vec3 b, in float t) {
	return a + t * (b - a);
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
float f_mapFloat(float from_min, float from_max, float to_min, float to_max, float value) {
	return (to_min + ((to_max - to_min) / (from_max - from_min)) * (value - from_min));
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
float f_mapFloatClamp(float from_min, float from_max, float to_min, float to_max, float value) {
	if (value > from_max) return to_max;
	else if (value < from_min) return to_min;
	else return (to_min + ((to_max - to_min) / (from_max - from_min)) * (value - from_min));
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec2 f_mapVec2(vec2 from_min, vec2 from_max, vec2 to_min, vec2 to_max, vec2 value) {
	return vec2(f_mapFloat(from_min.x, from_max.x, to_min.x, to_max.x, value.x), f_mapFloat(from_min.y, from_max.y, to_min.y, to_max.y, value.y));
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec3 f_faceForward(vec3 a, vec3 b) {
	return dot(a, b) < 0.0 ? -b : b;
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
float f_luminance(vec3 c) {
	return 0.212671 * c.x + 0.715160 * c.y + 0.072169 * c.z;
}

bool f_quadratic(float A, float B, float C, out float t0, out float t1) {
	float discriminant = B * B - 4.0 * A * C;

	if (discriminant < 0.0) {
		return false;
	}

	float sqrt_discriminant = sqrt(discriminant);
	t0 = (-B - sqrt_discriminant) / (2.0 * A);
	t1 = (-B + sqrt_discriminant) / (2.0 * A);

	return true;
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec4 sampleTextureRgba8u(in Texture tex, in vec2 uv) {
	uint x = uint(uv.x * float(tex.width));
	uint y = uint(uv.y * float(tex.height));

	x = clamp(x, 0, tex.width - 1);
	y = clamp(y, 0, tex.height - 1);

	uint index = tex.start + y * tex.width + x;
	uint color = texture_data[index];

	return vec4(
		float((color >> 24) & 0xFF) / 255.0,
		float((color >> 16) & 0xFF) / 255.0,
		float((color >> 8) & 0xFF) / 255.0,
		float(color & 0xFF) / 255.0
	);
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec4 sampleTextureRgba16f(in Texture tex, in vec2 uv) {
	uint x = uint(uv.x * float(tex.width));
	uint y = uint(uv.y * float(tex.height));

	x = clamp(x, 0, tex.width - 1);
	y = clamp(y, 0, tex.height - 1);

	uint index = tex.start + (y * tex.width + x) * 2;
	uint color_a = texture_data[index];
	uint color_b = texture_data[index+1];

	vec2 rg = unpackHalf2x16(color_a);
	vec2 ba = unpackHalf2x16(color_b);

	return vec4(
		rg.x,
		rg.y,
		ba.x,
		ba.y
	);
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec4 sampleTextureRgba32f(in Texture tex, in vec2 uv) {
	uint x = uint(uv.x * float(tex.width));
	uint y = uint(uv.y * float(tex.height));

	x = clamp(x, 0, tex.width - 1);
	y = clamp(y, 0, tex.height - 1);

	uint index = tex.start + (y * tex.width + x) * 4;

	return vec4(
		texture_data[index],
		texture_data[index + 1],
		texture_data[index + 2],
		texture_data[index + 3]
	);
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec2 f_getUV(Hit hit_data) {
	return hit_data.uvw.x * vec2(hit_data.hit_tri.uv_a_x, hit_data.hit_tri.uv_a_y) +
	hit_data.uvw.y * vec2(hit_data.hit_tri.uv_b_x, hit_data.hit_tri.uv_b_y) +
	hit_data.uvw.z * vec2(hit_data.hit_tri.uv_c_x, hit_data.hit_tri.uv_c_y);
}
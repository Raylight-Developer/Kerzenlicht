// INTERNAL ---------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
struct Medium {
	uint  type;
	float density;
	vec3  color;
	float anisotropy;
};

// LINK -------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
struct Camera {
	float focal_distance;
	float ortho_scale;
	float aperture;
	float fov;

	vec3  position;
	vec3  x_vec;
	vec3  y_vec;
	vec3  z_vec;
	vec3  p_uv;
	vec3  p_u;
	vec3  p_v;
};

struct Camera_Lens {
	float curvature_radius; // circle radius. if positive, viewing from inside(convex), if negative, viewing from outside(concave)
	float aperture_radius; // cutoff radius
	float z_distance; // distance of sphere center from camera
	float ior; // surface IOR
};

struct Triangle {
	vec3  pos_a;
	float uv_a_x;
	vec3  normal_a;
	float uv_a_y;
	// 32
	vec3  pos_b;
	float uv_b_x;
	vec3  normal_b;
	float uv_b_y;
	// 64
	vec3  pos_c;
	float uv_c_x;
	vec3  normal_c;
	float uv_c_y;
	// 96
	vec3  padding;
	uint  material;
	// 112
};

struct Bvh {
	vec3 p_min;
	uint pointer;
	vec3 p_max;
	uint tri_count; // If == 0, pointer leads to other Bvh Node, else leads to Triangle Start Index
	// 32
};

struct Texture {
	uint start;
	uint width;
	uint height;
	uint format;
	// 16
};

struct Point_Light {
	vec3  pos;
	float radius;
	vec3  color;
	float intentsity;
	// 32
};

struct Directional_Light {
	vec3  rotation;
	float angle;
	vec3  color;
	float intentsity;
	// 32
};

struct Material {
	vec3  baseColor;
	float opacity;
	uint  alphaMode;
	float alphaCutoff;
	vec3  emission;
	float anisotropic;
	float metallic;
	float roughness;
	float subsurface;
	float specularTint;
	float sheen;
	float sheenTint;
	float clearcoat;
	float clearcoatRoughness;
	float specTrans;
	float ior;
	float ax;
	float ay;
	Medium medium;
};

// DEFINITIONS ------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
#define TWO_PI   6.28318530718
#define PI       3.14159265359
#define HALF_PI  1.57079632679
#define INV_PI   0.31830988618
#define DEG_RAD  0.01745329252
#define RAD_DEG  0.01745329252

#define MAX_DIST 10000.0
#define EPSILON  0.0001
#define INF 1000000.0

#define MAX_UINT 4294967295

#define QUAD_LIGHT 0
#define SPHERE_LIGHT 1
#define DISTANT_LIGHT 2

#define MEDIUM_NONE 0
#define MEDIUM_ABSORB 1
#define MEDIUM_SCATTER 2
#define MEDIUM_EMISSIVE 3

#define ALPHA_MODE_OPAQUE 0
#define ALPHA_MODE_BLEND 1
#define ALPHA_MODE_MASK 2

// INTERNAL ---------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
struct Ray {
	vec3 origin;
	vec3 direction;
};

struct Sphere {
	vec3  position;
	float diameter;
};

struct Hit {
	bool  error;
	float t_dist;
	bool  inside;
	bool  mesh_hit;

	uint  bvh_depth;
	uint  material;

	vec3  hit_pos;
	vec3  hit_normal;
	vec3  uvw;
	float pdf;

	Triangle hit_tri;
};
Hit f_hit() {
	Hit hit;
	hit.error = false;
	hit.mesh_hit = false;
	hit.hit_normal = vec3(0);
	hit.bvh_depth = 0;
	hit.material = 0;
	hit.pdf = 0;
	hit.t_dist = MAX_DIST;
	return hit;
}

struct State {
	uint  depth;
	float eta;
	float hitDist;

	vec3  fhp;
	vec3  normal;
	vec3  ffnormal;
	vec3  tangent;
	vec3  bitangent;

	bool  isEmitter;

	vec2  texCoord;
	uint  matID;

	Medium medium;
	Material material;
};

struct BsdfSampleRec {
	vec3  L;
	vec3  f;
	float pdf;
};

struct LightSampleRec {
	vec3  normal;
	vec3  emission;
	vec3  direction;
	float dist;
	float pdf;
};
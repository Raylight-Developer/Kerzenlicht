//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
void f_accumulate(in vec4 color, in ivec2 pixel_id) {
	vec4 previous_color = imageLoad(KL_RENDER_TEXTURE_ACCUMULATION, pixel_id);
	if (KL_UNIFORM_CURRENT_SAMPLE == 0) {
		previous_color = vec4(0);
	}

	float weight = float(KL_UNIFORM_CURRENT_SAMPLE);
	vec4 full_color = (previous_color * weight + color) / (weight + 1.0);
	imageStore(KL_RENDER_TEXTURE_ACCUMULATION, pixel_id, vec4(full_color.rgb / full_color.a, 1.0));
}
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
vec4 f_render(in vec2 uv, in ivec2 pixel_id) {
	f_debugRender(uv, pixel_id);

	Ray ray;
	vec4 pixel_color = vec4(0);

	if (KL_BUFFER_CAMERA_LENSES.length() == 0) {
		ray = f_cameraRay(uv);
	}
	else {
		ray = f_cameraNormRay(uv);

		float t_dist = MAX_DIST;
		vec3 normal;
		for (uint i = 0; i < KL_BUFFER_CAMERA_LENSES.length(); i++) {

			if (f_rayLensIntersection(ray, KL_BUFFER_CAMERA_LENSES[i], t_dist, normal)) {
				//pixel_color += vec4(vec3(dot(ray.direction,normal)), 0.5);
				pixel_color += vec4(abs(normal) * 10.1, 1);
				//ray.origin = ray.origin + ray.direction * t_dist;
				//ray.direction = f_refract(ray.direction, normal, 1.0 / KL_BUFFER_CAMERA_LENSES[i].ior, 1.0);
			}
		}
	}

	pixel_color += f_pathTrace(ray, pixel_id);
	f_accumulate(pixel_color, pixel_id);

	return pixel_color;
}
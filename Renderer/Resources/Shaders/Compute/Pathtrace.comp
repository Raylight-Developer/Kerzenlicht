//vec4 f_environmentTexture(in Ray ray) {
//	ray.direction = eulerToRot(vec3(0,-90,0)) * ray.direction;
//
//	float phi = atan(ray.direction.y, r.direction.x);
//	float theta = acos(ray.direction.z);
//	float u = phi / TWO_PI + 0.5;
//	float v = theta / PI;
//
//	return texture(environment_texture, vec2(u,v)) * HDRI_STRENGTH;
//}

vec4 f_pathTrace(in Ray ray, in vec2 uv, in ivec2 pixel_id) {
	vec4 radiance;
	float alpha = 1.0f;

	for (uint b = 0; b < ray_bounces; b++) {
		Hit hit_data = f_hit();
		f_sceneIntersection(ray, hit_data);
		if (hit_data.mesh_hit) {
			imageStore(normal_render_layer, pixel_id, vec4(abs(hit_data.hit_normal), 1));
			radiance = f_shade(hit_data, ray);
		}
		else {
			imageStore(normal_render_layer, pixel_id, vec4(0));
			radiance = vec4(0,0,0,1);
		}
		for (int i = 0; i < hit_data.bvh_depth; i++) alpha *= 0.95;
	}
	imageStore(bvh_render_layer, pixel_id, vec4(vec3(1-alpha), 1));
	return radiance;
}

vec4 f_render(in vec2 uv, in ivec2 pixel_id) {
	vec4 color = vec4(0);
	Ray ray = f_cameraRay(uv);
	color = f_pathTrace(ray, uv, pixel_id);
	return clamp(color, 0, 1);
}